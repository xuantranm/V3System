@using System.Globalization
@helper BuildLinks(int start, int end, string innerContent)
{
     for (int i = start; i <= end; i++)
     {
         <a class="@(i == Model.CurrentPage ? "current" : "")">@(innerContent ?? i.ToString(CultureInfo.InvariantCulture))</a>     
     }
}

@helper PageLinks()
{
    const int MaxPages = 11;
    
    if (Model.TotalPages <= MaxPages)
    {
        @BuildLinks(1, this.Model.TotalPages, null)
        return;
    }

    int pagesAfter = Model.TotalPages - Model.CurrentPage; // Number of pages after current
    int pagesBefore = Model.CurrentPage - 1; // Number of pages before current

    if (pagesAfter <= 4)
    {
        @BuildLinks(1, 1, null) // Show 1st page

        int pageSubset = Model.TotalPages - MaxPages - 1 > 1 ? Model.TotalPages - MaxPages - 1 : 2;
        @BuildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

        @BuildLinks(Model.TotalPages - MaxPages + 3, Model.TotalPages, null) // Show last pages

        return; // Exit
    }

    if (pagesBefore <= 4)
    {
        @BuildLinks(1, MaxPages - 2, null) // Show 1st pages

        int pageSubset = MaxPages + 2 < Model.TotalPages ? MaxPages + 2 : Model.TotalPages - 1;
        @BuildLinks(pageSubset, pageSubset, "...") // Show page subset (...)

        @BuildLinks(Model.TotalPages, Model.TotalPages, null) // Show last page

        return; // Exit

    }

    if (pagesAfter > 4)
    {
        @BuildLinks(1, 1, null) // Show 1st pages

        int pageSubset1 = Model.CurrentPage - 7 > 1 ? Model.CurrentPage - 7 : 2;
        int pageSubset2 = Model.CurrentPage + 7 < Model.TotalPages ? Model.CurrentPage + 7 : Model.TotalPages - 1;

        @BuildLinks(pageSubset1, pageSubset1, pageSubset1 == Model.CurrentPage - 4 ? null : "...") // Show 1st page subset (...)

        @BuildLinks(Model.CurrentPage - 3, Model.CurrentPage + 3, null) // Show middle pages

        // Show 2nd page subset (...)
        // only show ... if page is contigous to the previous one.
        @BuildLinks(pageSubset2, pageSubset2, pageSubset2 ==  Model.CurrentPage + 4 ? null : "...")
        @BuildLinks(Model.TotalPages, Model.TotalPages, null) // Show last page
    }    
}

<div class="pagination">
    Page: 
    @this.PageLinks()       
</div>